#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""PPFW 0.2

https://github.com/pidpawel/ppfw

Usage:
  ppfw [--pretend] [--config=<config>] [--verbosity=<verbosity>] (start|stop|restart)
  ppfw (-h|--help)

Options:
  --pretend                   Do not execute commands.
  --config=<config>           Use instead default config file.
  -v --verbosity=<verbosity>  Verbosity.

  -h --help                   Show help.
"""
from docopt import docopt
from pprint import pprint
import configparser
import subprocess
import socket
import re
import os
import sys


ipv4_regexp = re.compile('^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')
ipv6_regexp = re.compile('^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?$', re.IGNORECASE)


def print_error(text):
    print("Error: %s!" % text)
    sys.exit(-1)


def print_debug(level, message):
    global verbosity
    if verbosity >= level:
        print("%s %s" % ('>'*level, message))


def get_predefined_sysfs():
    return {# enable syn cookies (prevent against the common 'syn flood attack')
            'net.ipv4.tcp_syncookies': 1,
            # ignore all ICMP ECHO and TIMESTAMP requests sent to it via broadcast/multicast
            'net.ipv4.icmp_echo_ignore_broadcasts': 1,
            # disable Packet forwarding between interfaces
            'net.ipv4.ip_forward': 0,
            # log packets with impossible addresses to kernel log
            'net.ipv4.conf.all.log_martians': 1,
            # do source validation by reversed path (Recommended option for single homed hosts)
            'net.ipv4.conf.all.rp_filter': 1,
            # don't send redirects
            'net.ipv4.conf.all.send_redirects': 0,
            # don't accept packets with SRR option
            'net.ipv4.conf.all.accept_source_route': 0,
            # don't accept routers' redirects
            'net.ipv4.conf.all.accept_redirects': 0,
            # …neither from „trusted” hosts
            'net.ipv4.conf.all.secure_redirects': 0,
            # don't reply to some ARP requests
            'net.ipv4.conf.all.proxy_arp': 0,
            # always defragment packets before passing them to firewall
            #'net.ip_always_defrag': 1,
            # ignore invalid ICMP responses
            'net.ipv4.icmp_ignore_bogus_error_responses': 1,
    }


def get_user_sysfs(user_rules):
    r = {}
    sysfs_re = re.compile('^[a-zA-Z0-9._\-]+$')
    for name, value in user_rules.items():
        if not sysfs_re.match(name):
            print_error("One of your sysfs rules contains characters wich are not allowed: %s" % name)
        r[name] = int(value)
    return r


def execute_sysfs(rules, path='/sbin/sysctl'):
    print_debug(2, 'Applying sysctl rules…')
    def sysctl(name, value):
        call = [path, '-q', '-w', '%s=%s' % (name, value)]
        print_debug(3, "Executing %s" % ' '.join(call))
        global pretend
        if not pretend:
            subprocess.call(call)
    for name, value in rules.items():
        sysctl(name, value)


class RuleContainer:
    def __init__(self, use_ipv4, use_ipv6):
        self.use_ipv4 = use_ipv4
        self.use_ipv6 = use_ipv6

        self.sections = []
        self.rules_ipv4 = {}
        self.rules_ipv6 = {}

    def append_both(self, rule, section):
        self.append_ipv4(rule, section)
        self.append_ipv6(rule, section)

    def append_ipv4(self, rule, section):
        if section and not section in self.sections:
            self.sections.append(section)

        if section in self.rules_ipv4:
            self.rules_ipv4[section].append(rule)
        else:
            self.rules_ipv4[section] = [rule]

    def append_ipv6(self, rule, section):
        if section and not section in self.sections:
            self.sections.append(section)

        if section in self.rules_ipv6:
            self.rules_ipv6[section].append(rule)
        else:
            self.rules_ipv6[section] = [rule]

    def prepend_both(self, rule, section):
        self.prepend_ipv4(rule, section)
        self.prepend_ipv6(rule, section)

    def prepend_ipv4(self, rule, section):
        if section and not section in self.sections:
            self.sections.append(section)

        if section in self.rules_ipv4:
            self.rules_ipv4[section].insert(0, rule)
        else:
            self.rules_ipv4[section] = [rule]

    def prepend_ipv6(self, rule, section):
        if section and not section in self.sections:
            self.sections.append(section)

        if section in self.rules_ipv6:
            self.rules_ipv6[section].insert(0, rule)
        else:
            self.rules_ipv6[section] = [rule]


    def get_ipv4_rules(self):
        r = []
        for section in self.sections:
            r += self.rules_ipv4[section]

        return r

    def get_ipv6_rules(self):
        r = []
        for section in self.sections:
            r += self.rules_ipv6[section]

        return r

    def reorder_sections(self):
        if 'finish' in self.sections:
            self.sections.remove('finish')
            self.sections.append('finish')


    def execute_iptables(self, binary_path):
        self.reorder_sections()
        print_debug(2, 'Loading iptables rules…')
        for section in self.sections:
            if section in self.rules_ipv4 and len(self.rules_ipv4[section]) > 0:
                print_debug(4, "Section %s" % section)
                for rule in self.rules_ipv4[section]:
                    call = [binary_path] + rule.split()
                    print_debug(3, "Executing %s" % ' '.join(call))
                    global pretend
                    if not pretend:
                        ret = subprocess.call(call)
                        if not ret == 0:
                            print_debug(2, 'Error when applying rule!!!')

    def execute_ip6tables(self, binary_path):
        self.reorder_sections()
        print_debug(2, 'Loading ip6tables rules…')
        for section in self.sections:
            if section in self.rules_ipv6 and len(self.rules_ipv6[section]) > 0:
                print_debug(4, "Section %s" % section)
                for rule in self.rules_ipv6[section]:
                    call = [binary_path] + rule.split()
                    print_debug(3, "Executing %s" % ' '.join(call))
                    global pretend
                    if not pretend:
                        subprocess.call(call)


def rules_cleanup(container):
    print_debug(2, 'Cleaning firewall…')
    container.append_both('-F', 'cleanup')  # Flush all chains
    container.append_both('-X', 'cleanup')  # Delete user-defined chains
    container.append_both('-Z', 'cleanup')  # Zero packet-counters


def rules_policies(container, input_policy, output_policy, forward_policy):
    print_debug(2, 'Setting new policies…')

    if input_policy in ('accept', 'drop'):
        container.append_both('-P INPUT ' + input_policy.upper(), 'policies')
    elif input_policy == 'reject':
        container.append_both('-P INPUT DROP', 'policies')
        container.append_both('-A INPUT -p tcp -j REJECT --reject-with tcp-reset', 'finish')
        container.append_ipv4('-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable', 'finish')
        container.append_ipv6('-A INPUT -p udp -j REJECT --reject-with icmp6-port-unreachable', 'finish')
    else:
        print_error('Your input policy must be one of: accept, reject, drop')

    if output_policy in ('accept', 'drop'):
        container.append_both('-P OUTPUT ' + output_policy.upper(), 'policies')
    elif output_policy == 'reject':
        container.append_both('-P OUTPUT DROP', 'policies')
        container.append_both('-A OUTPUT -p tcp -j REJECT --reject-with tcp-reset', 'finish')
        container.append_ipv4('-A OUTPUT -p udp -j REJECT --reject-with icmp-port-unreachable', 'finish')
        container.append_ipv6('-A OUTPUT -p udp -j REJECT --reject-with icmp6-port-unreachable', 'finish')
    else:
        print_error('Your output policy must be one of: accept, reject, drop')

    if forward_policy in ('accept', 'drop'):
        container.append_both('-P FORWARD ' + forward_policy.upper(), 'policies')
    elif forward_policy == 'reject':
        container.append_both('-P FORWARD DROP', 'policies')

        container.append_both('-A FORWARD -p tcp -j REJECT --reject-with tcp-reset', 'finish')

        container.append_ipv4('-A FORWARD -p udp -j REJECT --reject-with icmp-port-unreachable', 'finish')
        container.append_ipv6('-A FORWARD -p udp -j REJECT --reject-with icmp6-port-unreachable', 'finish')
    else:
        print_error('Your forward policy must be one of: accept, reject, drop')


def rules_invalid(container):
    print_debug(2, 'Dropping invalid packets.')
    container.append_both('-A INPUT -m state --state INVALID -j DROP', 'invalid')


def rules_loopback(container):
    print_debug(2, 'Setting loopback policy…')
    container.append_both('-A INPUT -i lo -j ACCEPT', 'loopback')
    container.append_both('-A OUTPUT -o lo -j ACCEPT', 'loopback')


def rules_stateful(container):
    print_debug(2, 'Accepting established and related packets.')
    container.append_both('-A INPUT -m state --state ESTABLISHED -j ACCEPT', 'stateful')
    container.append_both('-A INPUT -m state --state RELATED -j ACCEPT', 'stateful')


def rules_icmp(container, ping_policy):
    print_debug(2, 'Adding ICMP rules…')

    if not ping_policy in ('accept', 'drop'):
        print_error('Your ICMP policy must be one of: accept, drop')

    if ping_policy == 'drop':
        container.append_ipv4('-A INPUT -p icmp --icmp-type echo-request -j DROP', 'icmp')
        container.append_ipv6('-A INPUT -p ipv6-icmp --icmpv6-type echo-request -j DROP', 'icmp')

    container.append_ipv4('-A INPUT -p icmp -j ACCEPT', 'icmp')
    container.append_ipv6('-A INPUT -p ipv6-icmp -j ACCEPT', 'icmp')


def rules_whitelist(container, hosts):
    print_debug(2, 'Whitelist.')
    for item in hosts:
        base = item.split('/')[0]
        if ipv4_regexp.match(base):
            container.append_ipv4("-A INPUT -s %s -j ACCEPT" % item, 'whitelist')
        elif ipv6_regexp.match(base):
            container.append_ipv6("-A INPUT -s %s -j ACCEPT" % item, 'whitelist')
        else:
            container.append_both("-A INPUT -s %s -j ACCEPT" % item, 'whitelist')

def rules_blacklist(container, hosts):
    print_debug(2, 'Blacklist.')
    for item in hosts:
        base = item.split('/')[0]
        if ipv4_regexp.match(base):
            container.append_ipv4("-A INPUT -s %s -j DROP" % item, 'blacklist')
        elif ipv6_regexp.match(base):
            container.append_ipv6("-A INPUT -s %s -j DROP" % item, 'blacklist')
        else:
            container.append_both("-A INPUT -s %s -j DROP" % item, 'blacklist')

def rules_services(container, services):
    print_debug(2, 'Public services.')
    for service in services:
        if service.isnumeric():
            container.append_both("-A INPUT -p tcp --dport %s -j ACCEPT" % service, 'services')
            container.append_both("-A INPUT -p udp --dport %s -j ACCEPT" % service, 'services')

        else:
            try:
                port = socket.getservbyname(service, 'tcp')
            except OSError:
                pass
            else:
                container.append_both("-A INPUT -p tcp --dport %s -j ACCEPT" % port, 'services')

            try:
                port = socket.getservbyname(service, 'udp')
            except OSError:
                pass
            else:
                container.append_both("-A INPUT -p udp --dport %s -j ACCEPT" % port, 'services')

if __name__ == '__main__':
    if not os.geteuid() == 0:
        sys.exit('You have to be root to use this script')

    # Just to state desired fallbacks, overriden below
    verbosity = 2
    pretend = False

    use_sysfs = True

    use_ipv4 = True
    use_ipv6 = True

    action = 'restart'

    arguments = docopt(__doc__)

    config_file = '/etc/ppfw.conf'
    if arguments['--config']:
        config_file = arguments['--config']

    config = configparser.ConfigParser(allow_no_value=True,
                                       empty_lines_in_values=False,
                                       delimiters="=",
                                       inline_comment_prefixes="#")
    config.optionxform = str
    config.read(config_file)

    verbosity = config.getint('core', 'verbosity', fallback=2)

    use_sysfs = config.getboolean('core', 'use_sysfs', fallback=True)

    use_ipv4 = config.getboolean('core', 'use_v4', fallback=True)
    use_ipv6 = config.getboolean('core', 'use_v6', fallback=True)

    policy_input = config.get('policies', 'input', fallback='accept')
    policy_output = config.get('policies', 'output', fallback='accept')
    policy_forward = config.get('policies', 'forward', fallback='reject')

    policy_ping = config.get('policies', 'ping', fallback='accept')

    path_iptables = config.get('paths', 'iptables', fallback='/sbin/iptables')
    path_ip6tables = config.get('paths', 'ip6tables', fallback='/sbin/ip6tables')
    path_sysctl = config.get('paths', 'sysctl', fallback='/sbin/sysctl')

    if not (use_ipv4 or use_ipv6):
        sys.exit("You have to specify at least one IP version to run this program.")

    if arguments['--pretend']:
        pretend = arguments['--pretend']

    if arguments['--verbosity']:
        verbosity = int(arguments['--verbosity'])

    if verbosity < 0:
        verbosity = 0
    elif verbosity > 10:
        verbosity = 10

    if arguments['start'] or arguments['restart']:
        action = 'restart'
    elif arguments['stop']:
        action = 'stop'

    print_debug(1, 'Starting.')
    if pretend:
        print_debug(1, 'Pretend mode is ON. Commands will not be executed despite logging so.')

    desired_sysfs = {}

    if use_sysfs:
        desired_sysfs.update(get_predefined_sysfs())

        if 'sysfs' in config.sections():
            desired_sysfs.update(get_user_sysfs(dict(config.items('sysfs'))))

    rule_container = RuleContainer(use_ipv4=use_ipv4, use_ipv6=use_ipv6)

    if action == 'stop':
        rules_cleanup(rule_container)
        print_debug(1, 'WARNING: Accepting ALL packets!')
        rules_policies(rule_container, 'accept', 'accept', 'accept')

    elif action == 'restart':
        rules_cleanup(rule_container)
        rules_policies(rule_container, policy_input, policy_output, policy_forward)
        rules_invalid(rule_container)
        rules_loopback(rule_container)

        if 'blacklist' in config.sections():
            rules_blacklist(rule_container, dict(config.items('blacklist')).keys())

        rules_stateful(rule_container)

        if 'whitelist' in config.sections():
            rules_whitelist(rule_container, dict(config.items('whitelist')).keys())

        rules_icmp(rule_container, policy_ping)

        if 'services' in config.sections():
            rules_services(rule_container, dict(config.items('services')).keys())

    if use_sysfs and action == 'restart':
        execute_sysfs(rules=desired_sysfs, path=path_sysctl)

    if use_ipv4:
        rule_container.execute_iptables(path_iptables)
    if use_ipv6:
        rule_container.execute_ip6tables(path_ip6tables)

    print_debug(1, 'Done.')
